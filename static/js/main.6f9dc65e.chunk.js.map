{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["options","value","label","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getCommitMessage","concat","state","type","scope","subject","body","footer","onChange","e","setState","defineProperty","target","name","_this2","react_default","a","createElement","className","Form","FormGroup","Label","react_select_browser_esm","Input","onClick","el","document","setAttribute","style","position","left","appendChild","select","execCommand","removeChild","index_es","icon","faClipboard","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6f9dc65e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Select from \"react-select\";\r\nimport { Form, FormGroup, Label, Input } from \"reactstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faClipboard } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n\r\nimport \"./scss/style.css\";\r\nconst options = [\r\n  { value: \"feat\", label: \"feat\" },\r\n  { value: \"fix\", label: \"fix\" },\r\n  { value: \"docs\", label: \"docs\" },\r\n  { value: \"style\", label: \"style\" },\r\n  { value: \"refactor\", label: \"refactor\" },\r\n  { value: \"test\", label: \"test\" },\r\n  { value: \"chore\", label: \"chore\" }\r\n];\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      type: null,\r\n      scope: \"\",\r\n      subject: \"\",\r\n      body: \"\",\r\n      footer: \"\"\r\n    };\r\n  }\r\n\r\n  getCommitMessage = () => {\r\n    let tmpString = `${this.state.type ? this.state.type.value : \"\"} (${\r\n      this.state.scope\r\n    }): ${this.state.subject} \r\n\r\n${this.state.body}\r\n    \r\n${this.state.footer}`;\r\n\r\n    return tmpString;\r\n  };\r\n\r\n  onChange = e => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value ? e.target.value : \"\"\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"app-container\">\r\n          <div className=\"two-screens-container\">\r\n            <div className=\"screen left\">\r\n              <Form>\r\n                <FormGroup>\r\n                  <Label>Type</Label>\r\n                  <Select\r\n                    name=\"type\"\r\n                    value={this.state.type}\r\n                    onChange={e => {\r\n                      this.setState({ type: e ? e : null });\r\n                    }}\r\n                    options={options}\r\n                  />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                  <Label>Scope</Label>\r\n                  <Input\r\n                    onChange={this.onChange}\r\n                    value={this.state.scope}\r\n                    name={\"scope\"}\r\n                  />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                  <Label>Subject</Label>\r\n                  <Input\r\n                    onChange={this.onChange}\r\n                    value={this.state.subject}\r\n                    name={\"subject\"}\r\n                  />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                  <Label>Message Body</Label>\r\n                  <Input\r\n                    onChange={this.onChange}\r\n                    value={this.state.body}\r\n                    name={\"body\"}\r\n                    type=\"textarea\"\r\n                  />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                  <Label>Footer</Label>\r\n                  <Input\r\n                    onChange={this.onChange}\r\n                    value={this.state.footer}\r\n                    name={\"footer\"}\r\n                    type=\"textarea\"\r\n                  />\r\n                </FormGroup>\r\n              </Form>\r\n            </div>\r\n            <div className=\"screen right\">\r\n              <div\r\n                className=\"copy-button\"\r\n                onClick={() => {\r\n                  var el = document.createElement(\"textarea\");\r\n                  // Set value (string to be copied)\r\n                  el.value = '\"' + this.getCommitMessage() + '\"';\r\n                  // Set non-editable to avoid focus and move outside of view\r\n                  el.setAttribute(\"readonly\", \"\");\r\n                  el.style = { position: \"absolute\", left: \"-9999px\" };\r\n                  document.body.appendChild(el);\r\n                  // Select text inside element\r\n                  el.select();\r\n                  // Copy text to clipboard\r\n                  document.execCommand(\"copy\");\r\n                  // Remove temporary element\r\n                  document.body.removeChild(el);\r\n                }}>\r\n                <FontAwesomeIcon icon={faClipboard} />\r\n              </div>\r\n              <div id=\"commit-message-formatted\"> Commit message </div>\r\n              <div className=\"commit-message-formatted\">\r\n                {this.getCommitMessage()}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}